<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <title>{{ page.title }}</title>
    <link rel="icon" type="image/png" href="{{{ page.favicon }}}">
    <link rel="mask-icon" href="{{{ page.tabicon.icon }}}" color="{{ page.tabicon.colour }}">
    <link rel="stylesheet" href="vendor/jquery/css/base/jquery-ui.min.css?v={{ cacheBuster }}">
    <link rel="stylesheet" href="vendor/font-awesome/css/font-awesome.min.css?v={{ cacheBuster }}">
    <link rel="stylesheet" href="red/style.min.css?v={{ cacheBuster }}">
    {{#page.css}}
    <link rel="stylesheet" href="{{.}}">
    {{/page.css}}
    {{#asset.vendorMonaco}}
    <link rel="stylesheet" href="vendor/monaco/style.css?v={{ cacheBuster }}">
    {{/asset.vendorMonaco}}
    <style>
        #main-header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 40px;
            background-color: #333;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 1000;
            box-sizing: border-box;
        }

        .header-logo {
            font-size: 20px;
            white-space: nowrap;
        }

        .header-button {
            background-color: #555;
            color: #fff;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            white-space: nowrap;
            margin-left: 10px;
        }

        #red-ui-editor {
            margin-top: 40px;
        }

        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .popup-close {
            position: absolute;
            top: 5px;
            right: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body spellcheck="false">
<header id="main-header">
    <div class="header-logo">Mi Logo</div>
    <button id="my-button" class="header-button">Guardar flujo</button>
    <button id="load-button" class="header-button">Cargar flujo</button>
    <script src="vendor/jquery/js/jquery.min.js?v={{ cacheBuster }}"></script>
    <script src="vendor/jquery/js/jquery-ui.min.js?v={{ cacheBuster }}"></script>
</header>

<!-- Aquí se mostrará el token -->
<div id="token-display" style="margin-top: 20px; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd;">
    Token: <span id="token-value">Cargando...</span>
</div>

<div id="red-ui-editor"></div>
<script src="vendor/vendor.js?v={{ cacheBuster }}"></script>
{{#asset.vendorMonaco}}
<script src="{{{ asset.vendorMonaco }}}?v={{ cacheBuster }}"></script>
{{/asset.vendorMonaco}}
<script src="{{{ asset.red }}}?v={{ cacheBuster }}"></script>
<script src="{{{ asset.main }}}?v={{ cacheBuster }}"></script>
{{# page.scripts }}
<script src="{{.}}"></script>
{{/ page.scripts }}
{{#sessionMessages}}
<script>RED.sessionMessages = {{{sessionMessages}}};</script>
{{/sessionMessages}}

<script>
async function getJwtToken() {
    return jwtToken = process.env.JWT_TOKEN;
}

async function showFlowListLoad() {
    try {
        const jwtToken = await getJwtToken();
        
        // Mostrar el token en el HTML
        document.getElementById('token-value').textContent = jwtToken;

        const response = await fetch('http://localhost:3000/api/v1/flow', {
            headers: {
                'Authorization': `Bearer ${jwtToken}`
            }
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const responseData = await response.json();
        const flows = responseData.data; 
        
        const popup = document.createElement('div');
        popup.className = 'popup';

        const closeButton = document.createElement('span');
        closeButton.innerHTML = '&times;';
        closeButton.className = 'popup-close';
        closeButton.onclick = function() {
            document.body.removeChild(popup);
        };
        popup.appendChild(closeButton);

        const title = document.createElement('h2');
        title.textContent = 'Seleccionar flujo para cargar';
        popup.appendChild(title);

        const flowList = document.createElement('ul');
        flowList.id = 'flowList';
        flowList.className = 'list-group';
        
        flows.forEach(function(flow) {
            const listItem = document.createElement('li');
            listItem.textContent = flow.name; 
            listItem.className = 'list-group-item';
            listItem.style.cursor = 'pointer';
            
            listItem.onclick = async function() {
                try {
                    const flowId = flow.id;
                    const response = await fetch(`http://127.0.0.1:1880/flow/`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${jwtToken}`
                        },
                        body: JSON.stringify({
                            label: flow.name,
                            nodes: JSON.parse(flow.nodes).shift()
                        })
                    });
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                } catch (error) {
                    console.error('Error al cargar el flujo:', error);
                }
            };
            
            flowList.appendChild(listItem);
        });
        
        popup.appendChild(flowList);
        document.body.appendChild(popup);
    } catch (error) {
        console.error('Error al mostrar la ventana emergente:', error);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const saveButton = document.getElementById('my-button');
    const loadButton = document.getElementById('load-button');
    
    saveButton.addEventListener('click', function() {
        showFlowList();
    });

    loadButton.addEventListener('click', function() {
        showFlowListLoad();
    });
});

async function getFlows() {
    const response = await fetch('http://127.0.0.1:1880/flows');
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return await response.json();
}

async function getCustomFlows() {
    const response = await fetch('http://localhost:3000/api/v1/flow');
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return await response.json();
}

async function createNewFlow(datos) {
    try {
        const response = await fetch('http://localhost:3000/api/v1/flow/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(datos)
        });
        if (response.ok) {
            return await response.json();
        } else {
            throw new Error('Error en la solicitud');
        }
    } catch (error) {
        console.error('Error al crear el flujo:', error);
        throw error;
    }
}

async function showFlowList() {
    try {
        const flows = await getFlows();
        const popup = document.createElement('div');
        popup.className = 'popup';

        const closeButton = document.createElement('span');
        closeButton.innerHTML = '&times;';
        closeButton.className = 'popup-close';
        closeButton.onclick = function() {
            document.body.removeChild(popup);
        };
        popup.appendChild(closeButton);

        const title = document.createElement('h2');
        title.textContent = 'Seleccionar flujo';
        popup.appendChild(title);

        const flowList = document.createElement('ul');
        flowList.id = 'flowList';
        flowList.className = 'list-group';
        
        flows.forEach(function(flow) {
            const listItem = document.createElement('li');
            listItem.textContent = flow.name; 
            listItem.className = 'list-group-item';
            listItem.style.cursor = 'pointer';
            
            listItem.onclick = async function() {
                try {
                    const flowId = flow.id;
                    const response = await fetch(`http://127.0.0.1:1880/flow/`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            label: flow.name,
                            nodes: JSON.parse(flow.nodes).shift()
                        })
                    });
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                } catch (error) {
                    console.error('Error al cargar el flujo:', error);
                }
            };
            
            flowList.appendChild(listItem);
        });
        
        popup.appendChild(flowList);
        document.body.appendChild(popup);
    } catch (error) {
        console.error('Error al mostrar la ventana emergente:', error);
    }
}
</script>
</body>
</html>
