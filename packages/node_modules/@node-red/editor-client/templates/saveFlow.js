// Función para transformar el JSON del primer tipo al segundo tipo
function transformJson(json) {
    const tab = {
        id: json.id,
        type: "tab",
        label: json.label,
        disabled: json.disabled,
        info: json.info,
        env: json.env
    };
    return [tab, ...json.nodes];
}

// Función para enviar el flujo al backend
async function createNewFlow(datos) {
    try {
        const response = await fetch('http://localhost:3000/api/v1/flow/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(datos)
        });
        if (response.ok) {
            return await response.json();
        } else {
            throw new Error('Error en la solicitud');
        }
    } catch (error) {
        console.error('Error al crear el flujo:', error);
        throw error;
    }
}

// Función para obtener los flujos desde el backend
async function getFlows() {
    const response = await fetch('http://127.0.0.1:1880/flows');
    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    return await response.json();
}

// Función para mostrar la lista de flujos en una ventana emergente
async function showFlowList() {
    try {
        const flows = await getFlows();
        const popup = document.createElement('div');
        popup.className = 'popup';

        const closeButton = document.createElement('span');
        closeButton.innerHTML = '&times;';
        closeButton.className = 'popup-close';
        closeButton.onclick = function() {
            document.body.removeChild(popup);
        };
        popup.appendChild(closeButton);

        const title = document.createElement('h2');
        title.textContent = 'Seleccionar flujo';
        popup.appendChild(title);

        const flowList = document.createElement('ul');
        flowList.id = 'flowList';
        flowList.className = 'list-group';
        
        // Agregar elementos a la lista de flujos según los datos obtenidos del backend
        flows.forEach(function(flow) {
            const listItem = document.createElement('li');
            listItem.textContent = flow.label; // Acceder al nombre de cada flow
            listItem.className = 'list-group-item';
            listItem.style.cursor = 'pointer';
            
            listItem.onclick = async function() {
                try {
                    const flowId = flow.id;
                    const response = await fetch(`http://127.0.0.1:1880/flow/${flowId}`);
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const flowJson = await response.json();
                    const transformedJson = transformJson(flowJson);
                    console.log('Transformed JSON:', transformedJson);
                    
                    // Crear los datos del nuevo recurso
                    const datosNuevoRecurso = {
                        name: flow.label,  // Usar flow.label para el nombre
                        nodes: transformedJson  // Usar el JSON transformado
                    };
                    
                    // Enviar los datos del nuevo recurso al backend
                    const result = await createNewFlow(datosNuevoRecurso);
                    console.log('Nuevo flujo creado:', result);
                } catch (error) {
                    console.error('Error al obtener el flujo:', error);
                }
            };
            
            flowList.appendChild(listItem);
        });
        
        popup.appendChild(flowList);
        document.body.appendChild(popup);
    } catch (error) {
        console.error('Error al mostrar la ventana emergente:', error);
    }
}

// Exportar las funciones para que puedan ser usadas en otros archivos
export { transformJson, createNewFlow, getFlows, showFlowList };